NUM_TOPICS = 5


GENERATE_DOCUMENT_TOPICS_PROMPT = """你是一个文档生成专家，拥有广泛的不同主题知识。
我的角色是：“{persona}”
我希望你为{figure_type}生成{num_topics}个主题，这些主题是我根据我的角色可能感兴趣的，或者我在日常生活中可能会遇到的。

以下是要求：
1. 每个主题是{figure_type}内容的高层次总结，包含一些设计细节，例如：“2022年1月的水电费账单，详细列出费用明细”。
2. 这些主题应该具有多样性，帮助我生成不同种类的文档。每个主题应该是独特的，并且不与其他主题重叠。
3. 主题需要根据文档类型进行条件设定。请确保你提供的主题能够最好地以"{figure_type}"形式呈现。
4. 所有主题必须使用中文，即使角色是非中文的。
5. 列出{num_topics}个主题，针对“{persona}”，并用“|”字符分隔，例如：topic1 | topic2 | …… | topic{num_topics}。
不要在回应的开头或结尾包含任何额外的文字。"""




GENERATE_DOCUMENT_DATA_JSON_PROMPT = """你是内容创作方面的专家，并且对各种主题有广泛的知识。
我的角色是："{persona}"
我需要一些关于"{topic}"的资料，这些资料可以用来生成一个{figure_type}。
以下是要求：
1. 这些资料应与主题相关，并根据我的角色定制。其结构必须适合{figure_type}。
2. 这些资料应具有真实性，内容应使用真实世界的实体名称。不要使用占位符名称如xxA、xxB等，也不要使用模板数据如[Name]、[Date]等。
3. 这些资料应具有多样性，涵盖该主题的不同方面，以确保文档信息丰富。
4. 不要提供过多资料。只提供对**一页文档**至关重要的关键信息。
5. 所有资料必须用中文提供，即使角色的语言不是中文。
请以JSON格式提供资料，开头和结尾不要添加额外的文字。"""




GENERATE_DOCUMENT_DATA_JSON_FEW_PROMPT = """你是内容创作方面的专家，拥有广泛的知识，涉及各种话题。
我的角色是：“{persona}”
我需要一些关于“{topic}”的资料，这些资料可以用来生成一个{figure_type}。
以下是要求：
1. 资料应与主题相关，并根据我的角色定制。结构必须适合{figure_type}。
2. 资料应真实，内容应使用真实世界的实体命名。不要使用占位符名称，如xxA、xxB等。不要使用模板数据，如[Name]、[Date]等。
3. 资料应多样化，并涵盖主题的不同方面，以确保文档内容丰富。
4. 不要提供过多资料。只提供对**一页文档**至关重要的关键信息。
5. 所有资料必须使用中文，即使角色不是讲中文的。
请以JSON格式提供资料，不要在开始或结束时添加其他文本。"""



GENERATE_DOCUMENT_QA_PROMPT = """你是数据分析方面的专家，擅长提出与文档相关的问题。
我的角色是："{persona}"
我希望你能生成一些关于{topic}的{figure_type}的问答对，这些问题是我会问的。
在没有展示文档的情况下，我提供生成文档的数据和代码。

<data>
{data}
</data>

<code>
{code}
</code>

请提出一些*合理的问题*，人们在看到呈现的文档时会问。这些问题有以下要求：

1. **问题类型**：所有问题应为简答题，能够基于文档中的视觉信息回答。所有问题的答案可以用一个单词、短语或数字表示（尽量简洁）。
    (1) **信息检索问题**：询问文档中的具体信息，如数字、名字、日期、标题等。这些问题应该涵盖文档的不同方面（区域）。这是最常见的问题类型。
    (2) **推理问题**：需要对文档中的多个信息进行推理的问题。这些问题应该更具挑战性，并要求对文档有更深入的理解。
    (3) **文档类型特有问题**：这些问题是特定于此文档类型{figure_type}的。问题应针对文档的内容和结构进行定制。

2. **回答格式**：使用“|”分隔问题、解释和简洁的答案。
    (1) 遵循此格式：问题 | 解释 | 简洁答案。例如：总收入是多少？ | 总收入是文档中所有收入来源的总和，计算为$2000 + $3000 + $5000 = $10000。 | $10000
    (2) 用两个换行符(\n\n)分隔问题-答案对。问题1 | 解释1 | 答案1\n\n问题2 | 解释2 | 答案2\n\n...
    (3) 不要提供太多问题，5-10个问题即可。重点在于问题的多样性和质量，尽量涵盖文档的不同方面。
    (4) 简洁答案应尽可能简短，直接回答问题。答案应忠实于文档中的内容，不能重新措辞。答案中的所有单词应以自然语言处理，不使用编码术语或字符。

请严格遵循格式，不要在回答的开头或结尾添加任何额外的文字。"""




GENERATE_DOCUMENT_CODE_LATEX_PROMPT = """你是内容创作专家，擅长编写LaTeX代码生成文档。
我的角色是：“{persona}”
我有一些关于{topic}的材料，可以用来生成一个{figure_type}。

以下是材料（JSON格式）：
<data>
{data}
</data>

请编写一个LaTeX脚本，使用提供的数据生成一个{figure_type}。以下是要求：
1. **风格要求**：
    (1) 尝试富有创意，并修改默认的参数（例如字体、颜色、边框、阴影等），使文档风格独特，同时考虑到主题和人物。
    (2) 选择适当的设计、布局和边距，确保文档中所有元素都清晰可见、易于理解，没有文字重叠等问题。
    (3) 所有内容应该位于**一页**之内。这个非常重要，不能让文档太长或太短。
    (3) 图中使用中文，使用 ctex 宏包。

2. **代码要求**：生成一个**单页**文档，使用LaTeX。
    (1) 你需要将提供的数据硬编码到LaTeX脚本中以生成文档。注意LaTeX脚本的语法和格式。
    (2) **不要使用tikzpicture！**如果想改变页面背景颜色，使用`pagecolor`。大多数情况下，使用白色背景即可。
    (3) **移除页面编号**。不要尝试将示例图像/图形插入文档（例如，不要使用`\includegraphics[]example-image`）。

3. **输出要求**：
    在脚本的开头和结尾分别加上```latex和```，以便将代码与文本分开。这将帮助我轻松提取代码。

请不要在脚本中回答任何额外的文字。你的整个回复应该是可以直接执行的LaTeX代码。"""




GENERATE_DOCUMENT_CODE_HTML_PROMPT = """你是一位网页设计专家，擅长编写HTML来创建文档。
我的角色是："{persona}"
我有一些关于{topic}的材料，可以用来生成一个{figure_type}。

以下是这些材料（JSON格式）：
<data>
{data}
</data>

请使用HTML和CSS生成一个{figure_type}，并根据提供的数据。以下是要求：
1. **样式要求**：可以自由使用任何CSS框架、库、JavaScript插件或其他工具来创建文档。
    (1) 尝试富有创意，并通过CSS设计网页的样式、字体、颜色、边框和视觉布局，使其独特。设计文档时要考虑角色、主题和文档类型。
    (2) 选择适当的设计比例（例如，边距、页面大小、布局等），以确保文档中的信息清晰易懂，不会出现文本重叠等问题。
    (3) **不要让页面过长或过于稀疏。** 所有内容应放在**一页**上，这一点非常重要。
    (3) 图中使用中文。
    
2. **代码要求**：
    (1) 你需要将提供的数据硬编码到HTML脚本中，以生成文档。注意HTML脚本的语法和格式。
    (2) 将所有内容放在一个HTML文件中，不要使用外部CSS或JavaScript文件。

3. **输出要求**：
    在脚本的开头加上```html，并在末尾加上```，以便将代码与文本分开。

请不要在脚本中附加任何额外的文本，你的完整回复应该是可以直接执行的HTML代码。"""




GENERATE_DOCUMENT_CODE_DOCX_PROMPT = """你是一个专家级的网站设计师，并且擅长使用`.docx`创建文档。
我的身份是："{persona}"
我有一些关于{topic}的材料，可以用来生成一个{figure_type}。

以下是材料（JSON格式，已加载为字典）：

{data}

请定义一个Python函数`generate_document`，使用提供的数据生成一个{figure_type}。使用`python-docx`来定义文档，并返回`Document`对象。
以下是要求：
1. **样式要求**：
    (1) 尝试发挥创造力，修改默认参数（如字体、颜色、边框、页面大小等），使文档样式独特，同时考虑主题和身份。
    (2) 选择合适的设计、布局和边距，确保文档保存时所有元素可见、清晰、易于理解，没有文字重叠等问题。
    (3) 图中使用中文。

2. **代码要求**：创建一个名为`generate_document`的Python函数，使用`python-docx`定义文档并返回`Document`对象。
    (1) 提供的数据以字典形式作为函数的第一个参数。该函数没有其他参数。
    (2) 记得在脚本开头导入必要的库（例如`from docx import Document`）。
    (3) `generate_document`函数应该返回`Document`对象，例如`doc = Document() ... 你的代码 ... return doc`。注意`python-docx`脚本的语法和格式。
    (4) 只需定义函数，不要调用它。不要显示文档。保存文档时确保足够清晰可见，无需显示示例用法。

3. **输出要求**：
    在脚本开始时加上```python，并在脚本末尾加上```，以将代码与文本分开。

请不要在脚本中回答任何额外的文字，您的整个回应应该是可以直接执行的Python代码。"""
